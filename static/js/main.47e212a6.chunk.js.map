{"version":3,"sources":["components/C00ComponenteNuevo.jsx","components/C01Saludo.js","components/C02Contador.js","components/C03Operador.js","components/C04Matriz.js","components/C05MatrizOperaciones.js","App.js","serviceWorker.js","index.js"],"names":["ComponenteNuevo","Saludo","msj","variable","Contador","useState","valor","setValor","numero","setNumero","onClick","console","log","Operador","Matriz","lista","map","item","index","key","MatrizOperaciones","setLista","dias","setDias","uniendoArray","texto","App","C00ComponenteNuevo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yKAMeA,G,MAJS,WACpB,OAAS,kDCQEC,EATA,SAACC,GACZ,OACI,6BACI,yDACA,wCAAcA,EAAIC,Y,OCefC,EApBC,WAAO,IAAD,EAEQC,mBAAS,GAFjB,mBAEXC,EAFW,KAEJC,EAFI,OAGUF,mBAAS,GAHnB,mBAGXG,EAHW,KAGHC,EAHG,KAUlB,OACI,6BACI,4BAAQC,QAAS,kBAAMH,EAASD,EAAQ,KAAxC,eACA,2DAAiCA,GACjC,6BACA,4BAAQI,QAVM,WAClBD,EAAUD,EAAS,GACnBG,QAAQC,IAAI,yBAQR,cACA,2DAAiCJ,KCJ9BK,EAXE,WAGb,OACI,kBAAC,WAAD,KACI,oDACa,kBCoBVC,EA1BA,WAAO,IAAD,EACST,mBAAS,CAAC,EAAE,EAAE,EAAE,EAAE,IAD3B,mBACVU,EADU,UAEjB,OACI,kBAAC,WAAD,KACI,4DACEA,EAAMC,KAAI,SAACC,GAAD,OAAUA,KACtB,6BACA,4DACEF,EAAMC,KAAI,SAACC,GAAD,OAAU,8BAAOA,MAC7B,6BACA,2DAEIF,EAAMC,KAAI,SAACC,EAAMC,GAAP,OACN,+BAAKD,EAAL,MAAcC,MAGtB,6BACA,2DAEIH,EAAMC,KAAI,SAACC,EAAMC,GAAP,OACN,uBAAGC,IAAOD,GAAV,IAAoBD,EAApB,MAA6BC,Q,OCyBlCE,EA7CW,WAAO,IAAD,EACFf,mBAAS,CAAC,EAAE,EAAE,EAAE,EAAE,IADhB,mBACrBU,EADqB,KACdM,EADc,OAEJhB,mBAAS,CAAC,QAAQ,SAAS,YAAY,WAFnC,mBAErBiB,EAFqB,KAEfC,EAFe,KAGtBC,EAAY,sBAAOT,GAAP,YAAiBO,IAHP,EAKAjB,mBAAS,GALT,mBAKrBG,EALqB,KAKbC,EALa,OAYFJ,mBAAS,CAAC,UAAU,SAAS,YAZ3B,mBAYrBoB,EAZqB,UAiB5B,OACI,kBAAC,WAAD,KACI,kEAEID,EAAaR,KAAI,SAACC,EAAMC,GAAP,OACb,uBAAGC,IAAOD,GAAV,IAAoBD,EAApB,MAA6BC,MAGrC,6BACA,2DACA,4BAAQR,QArBM,WAElBD,EAAUD,EAAS,GACnBa,EAAS,GAAD,mBAAKN,GAAL,CAAYP,OAkBhB,kBAEIc,EAAKN,KAAI,SAACC,EAAMC,GAAP,OACL,uBAAGC,IAAOD,GAAV,IAAoBD,EAApB,MAA6BC,EAA7B,QAGR,6BACA,2DACA,4BAAQR,QAtBK,WAEjBa,EAAQ,GAAD,mBAAKD,GAAL,YAAcG,OAoBjB,iBAEIH,EAAKN,KAAI,SAACC,EAAMC,GAAP,OACL,uBAAGC,IAAOD,GAAV,IAAoBD,EAApB,MAA6BC,EAA7B,UCALQ,MA3Bf,WAEE,OACE,6BACE,kDACA,kBAACC,EAAD,MACA,6BACA,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,QChBcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,a","file":"static/js/main.47e212a6.chunk.js","sourcesContent":["import React from 'react';      //imr\r\n\r\nconst ComponenteNuevo = () => {\r\n    return ( <h1>Componente (JSX)</h1>);\r\n}\r\n\r\nexport default ComponenteNuevo;\r\n/*\r\nimport React, { Component } from 'react';   //rcc\r\n\r\nclass C00ComponenteNuevo extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Componente clase\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default C00ComponenteNuevo;\r\n*/\r\n/*\r\nimport React from 'react'\r\n\r\nexport default function C00ComponenteNuevo() {\r\n    return (\r\n        <div>\r\n            Componente funcional equivalente\r\n        </div>\r\n    )\r\n}\r\n*/","import React from 'react';\r\n\r\nconst Saludo = (msj) => {\r\n    return (\r\n        <div>\r\n            <h1>Hola mundo desde React...</h1>\r\n            <h2>Mensaje: {msj.variable}</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Saludo;","import React, {useState, Fragment} from 'react';\r\nconst Contador =() => {\r\n\r\n    const [valor, setValor] = useState(0);\r\n    const [numero, setNumero] = useState(0);\r\n\r\n    const IncrementoDos = () => {\r\n        setNumero(numero + 1);\r\n        console.log(\"Mensaje de contador\");\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <button onClick={() => setValor(valor + 1)}> Contador1 </button>\r\n            <span> Incremento de contador1: {valor}</span>\r\n            <hr />\r\n            <button onClick={IncrementoDos}>Contador2 </button>\r\n            <span> Incremento de contador2: {numero}</span>\r\n        </div>\r\n    );\r\n}\r\nexport default Contador;\r\n\r\n/*\r\n//import react from 'react';\r\nimport React, {useState, Frament, Fragment} from 'react';\r\n\r\nconst Contador = () => {\r\n    \r\n    //\"numero\" nombre del estado\r\n    //\"setNumero\" es su modificador\r\n    //Se puede iniciar con numero, strinf, boleano, obj, etc.\r\n    const [numero, setNumero] = useState(0);\r\n\r\n    //Definiendo funci贸n flecha que incremente un valor\r\n    const aumentar = () => {\r\n        console.log('Hacer click')\r\n        setNumero(numero + 1)\r\n    }\r\n\r\n    //Dentro de HTML, se da lectura en llaves a las variables\r\n    //Se puede devolver s贸lo un elemento..., caso contrario\r\n    //Se puede usar <Fragment>, tambien <div>\r\n    //En el evento onClick se llama a la funci贸n flecha entre llaves\r\n    return (\r\n        <div>\r\n            <h3>mi primer componente {numero}</h3>\r\n            <button onClick={aumentar}>Aumentar</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Contador;\r\n*/","//Operador tercario\r\nimport React, {Fragment} from 'react';\r\nconst Operador = () => {\r\n\r\n    const edad = 18;\r\n    return (\r\n        <Fragment>\r\n            <h1>Operador ternario...</h1>\r\n            {edad >= 18? 'Mayor de edad' : 'Menor de edad'}\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Operador;","import React, {useState, Fragment} from 'react';\r\n\r\nconst Matriz = () => {\r\n    const [lista, setLista] = useState([1,2,3,4,5])\r\n    return (\r\n        <Fragment>\r\n            <h1>Lectura sin index y sin html</h1>\r\n            { lista.map((item) => item) }\r\n            <hr />\r\n            <h1>Lectura sin index y con html</h1>\r\n            { lista.map((item) => <span>{item}</span>)}\r\n            <hr />\r\n            <h1>Listas con index y sin key </h1>\r\n            {\r\n                lista.map((item, index) =>\r\n                    <p> {item} - {index}</p>\r\n                )\r\n            }\r\n            <hr />\r\n            <h1>Listas con index y con key </h1>\r\n            {\r\n                lista.map((item, index) =>\r\n                    <p key = {index} > {item} - {index}</p>\r\n                )\r\n            }\r\n        </Fragment>\r\n    );\r\n}\r\nexport default Matriz;","import React, {useState, Fragment} from 'react';\r\n\r\nconst MatrizOperaciones = () => {\r\n    const [lista, setLista] = useState([1,2,3,4,5]);\r\n    const [dias, setDias] = useState([\"lunes\",\"Martes\",\"Miercoles\",\"Jueves\"]);\r\n    const uniendoArray = [...lista, ...dias];\r\n\r\n    const [numero, setNumero] = useState(6);\r\n    const agregarNumero = () => {\r\n        //console.log(uniendoArray);\r\n        setNumero(numero + 1);\r\n        setLista([...lista, numero]);\r\n    }\r\n\r\n    const [texto, setTexto] = useState([\"Viernes\",\"Sabado\",\"Domingo\"]);\r\n    const agregarTexto = () => {\r\n        //setTexto(texto);\r\n        setDias([...dias, ...texto]);\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <h1>Lectura de la uni贸n de matrices</h1>\r\n            {\r\n                uniendoArray.map((item, index) =>\r\n                    <p key = {index} > {item} - {index}</p>\r\n                )\r\n            }\r\n            <hr />\r\n            <h1>Agregar un valor a un array</h1>\r\n            <button onClick={agregarNumero}>Agregar numero</button>\r\n            {\r\n                dias.map((item, index) =>\r\n                    <p key = {index} > {item} - {index} </p>\r\n                )\r\n            }\r\n            <hr />\r\n            <h1>Agregar un texto a un array</h1>\r\n            <button onClick={agregarTexto}>Agregar texto</button>\r\n            {\r\n                dias.map((item, index) =>\r\n                    <p key = {index} > {item} - {index} </p>\r\n                )\r\n            }\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default MatrizOperaciones;","import React from 'react';\nimport C00ComponenteNuevo from './components/C00ComponenteNuevo';\nimport Saludo from './components/C01Saludo';\nimport Contador from './components/C02Contador'; //Con o sin extension js\nimport Operador from './components/C03Operador';\nimport Matriz from './components/C04Matriz';\nimport MatrizOperaciones from './components/C05MatrizOperaciones';\n//import logo from './logo.svg';\n//import './App.css';\n/*\nimport logo from '.logo.svg';\nimpot './App.css';\n*/\nfunction App() {\n\n  return(\n    <div>\n      <h1>Practicas... React</h1>\n      <C00ComponenteNuevo />\n      <hr />\n      <Saludo />\n      <hr />\n      <Contador />\n      <hr />\n      <Operador />\n      <hr />\n      <Matriz />\n      <hr />\n      <MatrizOperaciones />\n    </div>\n  );\n/*  return (\n    <div className=\"App\">\n        <h1>Hola Mundo desde React</h1>\n        <Contador />\n    </div>\n  );\n*/\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}